system.time(rss <- read.csv('APS_nochi.csv', header = TRUE,colClasses = var, na.strings = c("NA",'')))
dollar <- function(x){
b<- gsub('$', '',x)
b
}
rss[,'PVAM'] = sapply(rss[,'PVAM'], dollar)
rss[,'PVAM'] <- as.numeric(rss[,'PVAM'] )
rownames(rss)<-rss$POLICY_NUMBER
drop<-readLines('variables/drop.txt')
rss.drop <- rss[, !(c(colnames(rss) %in% drop))]
``` {r dplyr_method, eval =FALSE }
library(dplyr)
rss.filter<- rss.drop %>%
filter(AGE <=60,
#HEIGHT<=90, HEIGHT>=42,
#BMI>=14, BMI<=60,
UNDERWRITE_AMT <=2000000,
AAAPS ==1,
CHI ==1,
SRCE_FILE_YEAR_NUM %in% c("2005", "2006", "2007", "2008", "2009", "2010" ,"2011" ,"2012", "2013", "2014")
)
rem <-c("CHI","AAAPS", "POLICY_NUMBER", 'SRCE_FILE_YEAR_NUM','FCTI','FCT3','DEBI','FCT5')
rss.work <- rss.filter[, !(c(colnames(rss.filter) %in% rem))]
```{r data_partition }
library(caret)
set.seed(998)
inTraining <- createDataPartition(rss.work$PM_IND,
p = .70,
list = FALSE)
training <- rss.work[ inTraining,]
testing  <- rss.work[-inTraining,]
set(1234)
#The Yeo-Johnson transformation is similar to the Box-Cox model but can accommodate predictors with zero and/or negative values (while the #predictors values for the Box-Cox transformation must be strictly positive.)
pre.process<- preProcess(training[,!(colnames(training) %in% c('PM_IND'))], method = c("center", "scale", "YeoJohnson", "nzv"))
train.process <- predict(pre.process,training[,!(colnames(training) %in% c('PM_IND'))])
test.process <- predict(pre.process,testing[,!(colnames(testing) %in% c('PM_IND'))])
set.seed(155)
ctrl <- trainControl(method = 'repeatedcv',
repeats = 3,
number =5,
classProbs =TRUE,
summaryFunction = twoClassSummary
)
rss.rf<-train(PM_IND ~ .,data=training,
method="rf",
trControl= trainControl(method = 'cv', number=5),
prox=TRUE,
metric ='ROC',
allowParallel=TRUE)
rss.rf<-train(PM_IND ~ .,data=training,
method="rf",
trControl= trainControl(method = 'cv', number=5),
prox=TRUE,
#metric ='ROC',
allowParallel=TRUE)
ctrl <- trainControl(method = 'repeatedcv',
repeats = 3,
number =5,
classProbs =TRUE,
summaryFunction = twoClassSummary
)
rss.rf<-train(PM_IND ~ .,data=training,
method="rf",
trControl= ctrl,
prox=TRUE,
metric ='ROC',
allowParallel=TRUE)
?make.names
colnames(training)
install.packages("HSAUR3")
atr(training)
str(training)
table(training$SEX)
View(test.process)
View(training)
table(training$LARGE_CASE_CDE)
levels(training$LARGE_CASE_CDE)
is.facet(training$SEX)
is.factor(training$SEX)
levels(training$PM_IND) <- make.names(levels(factor(all.dat$target)))
levels(training$PM_IND) <- make.names(levels(factor(training$PM_IND)))
rss.rf<-train(PM_IND ~ .,data=training,
method="rf",
trControl= ctrl,
prox=TRUE,
metric ='ROC',
allowParallel=TRUE)
str(training$PM_IND)
?colnames
warnings()
?make.names
?sbf
?nbsdf
?ndSBF
?nbSBF
str(BloodBrain)
data(BloodBrain)
str(BloodBrain)
pre.process
filterCtrl<- sbfControl(
functions = treebagSBF,
method = 'repeatedv', repeats = 5)
bagFilter <-sbf(PM_IND ~ .,
data=training,
sbfControl = filterCtrl
)
filterCtrl<- sbfControl(
functions = treebagSBF,
method = 'repeatedcv', repeats = 5)
bagFilter <-sbf(PM_IND ~ .,
data=training,
sbfControl = filterCtrl
)
warnings()
bagFilter
system.time(bagFilter <-sbf(PM_IND ~ .,
data=train.process,
sbfControl = filterCtrl
)
)
train.process$PM_IND<- cbind(train.process, training$PM_IND)
test.process$PM_IND <-  cbind(test.process, test.process$PM_IND)
test.process$PM_IND <-  cbind(testing.process, testing.process$PM_IND)
test.process$PM_IND <-  cbind(test.process, testing$PM_IND)
system.time(bagFilter <-sbf(PM_IND ~ .,
data=train.process,
sbfControl = filterCtrl
)
)
test.process$PM_IND <-  cbind.data.frame(test.process, testing$PM_IND)
train.process$PM_IND<- cbind.data.frame(train.process, training$PM_IND)
system.time(bagFilter <-sbf(PM_IND ~ .,
data=train.process,
sbfControl = filterCtrl
)
)
str(train.process)
head(test.process)
colnames(test.process)
head(training$PM_IND)
head(train.process$PM_IND)
test.process <- predict(pre.process,testing[,!(colnames(testing) %in% c('PM_IND'))])
train.process <- predict(pre.process,training[,!(colnames(training) %in% c('PM_IND'))])
train.process$PM_IND<- cbind(train.process, training$PM_IND)
str(train.process)
?cbind
m <- cbind(1, 1:7)
m
train.process <- predict(pre.process,training[,!(colnames(training) %in% c('PM_IND'))])
train.process$PM_IND<- training$PM_IND
str(train.process)
system.time(bagFilter <-sbf(PM_IND ~ .,
data=train.process,
sbfControl = filterCtrl
)
)
warnings()
train.filter <- predict(bagFilter, train.process )
train.filter <- predict(bagFilter, head(train.process ))
train.NC <- train.process[,-findCorrelation(cor(train.process),.8)]
train.filter <- predict(bagFilter, head(train.process )) ####issue with running the result
bagFilter
str(bagFilter)
parRandomForest2 <- function(xx,="" ...,="" ntree="500," mc="getOption("mc.cores"," 2l),="" seed="">
{
cl <->
if(!is.null(seed)) clusterSetRNGStream(cl, seed)
clusterEvalQ(cl, library(randomForest))
rfwrap <- function(ntree,="" xx,="" ...)="" randomforest(x="xx," ntree="ntree,">
rfpar <- parlapply(cl,="" rep(ceiling(ntree/mc),="" mc),="" rfwrap,="" xx="xx,">
stopCluster(cl)
do.call(combine, rfpar)
}
library(parallel)
parRandomForest2 <- function(xx,="" ...,="" ntree="500," mc="getOption("mc.cores"," 2l),="" seed="">
{
cl <->
if(!is.null(seed)) clusterSetRNGStream(cl, seed)
clusterEvalQ(cl, library(randomForest))
rfwrap <- function(ntree,="" xx,="" ...)="" randomforest(x="xx," ntree="ntree,">
rfpar <- parlapply(cl,="" rep(ceiling(ntree/mc),="" mc),="" rfwrap,="" xx="xx,">
stopCluster(cl)
do.call(combine, rfpar)
}
?mc.cores
library(randomForest)
library(parallel)
options(mc.cores = detectCores())
train <->
train[,1] <->
?combine
library(bigr)
getwd()
my.pwd<- readLines("passwd.txt", warn = FALSE)
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
is.bigr.connected()
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath  = "/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.77-0.b03.el6_7.x86_64/jre/lib/security/cacerts",
#trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
my.pwd<- readLines("passwd.txt", warn = FALSE)
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath  = "/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.77-0.b03.el6_7.x86_64/jre/lib/security/cacerts",
#trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
#trustStorePath  = "/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.77-0.b03.el6_7.x86_64/jre/lib/security/cacerts",
trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
is.bigr.connected()
fac_var<-readLines('variables/factors.txt')
num_var <-readLines('variables/numeric.txt')
char_var <-readLines('variables/character.txt')
fac_var<-readLines('variables/factors.txt')
num_var <-readLines('variables/numeric.txt')
char_var <-readLines('variables/character.txt')
class.var <- function(type.v, dat){
a<- rep(type.v, length(dat))
names(a)<-dat
a
}
#  factor variables
fac<-class.var("factor", dat = fac_var)
# numeric variables
num <-class.var("numeric", dat = num_var)
char <- class.var("character", dat = char_var)
# create the valueor the colclasses
var <- c(fac, char, num)
fac_var<-readLines('variables/factors.txt')
num_var <-readLines('variables/numeric.txt')
char_var <-readLines('variables/character.txt')
class.var <- function(type.v, dat){
a<- rep(type.v, length(dat))
names(a)<-dat
a
}
#  factor variables
fac<-class.var("factor", dat = fac_var)
# numeric variables
num <-class.var("numeric", dat = num_var)
char <- class.var("character", dat = char_var)
# create the valueor the colclasses
var <- c(fac, char, num)
rss <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
coltypes = var,
useMapReduce = T)
fac<-class.var("character", dat = fac_var)
# numeric variables
num <-class.var("numeric", dat = num_var)
char <- class.var("character", dat = char_var)
var <- c(fac, char, num)
rss <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
coltypes = var,
useMapReduce = T)
str(rss)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
coltypes = var,
useMapReduce = T)
summary(rssBig)
summary.bigr.frame(rssBig)
summary(tail(rssBig,10))
dollar <- function(x){
b<- gsub('$', '',x)
b
}
function(x){
b<- gsub('$', '',x)
class(b)<-'numeric'
}
cola<- function(x){
b<- gsub('$', '',x)
class(b)<-'numeric'
}
`colnames<-`(rss.drop)
`colnames(rss.drop)
colnames(rss.drop)
system.time(rss <- read.csv('APS_nochi.csv', header = TRUE,colClasses = var, na.strings = c("NA",'')))
cola(rss$PVAM)
class(rss$PVAM)
cola<- function(x){
x<- gsub('$', '',x)
as.numeric(x)
}
cola(rss$PVAM)
class(rss$PVAM)
cola<- function(x){
x<- gsub('$', '',x)
as.numeric(x)
x
}
class(rss$PVAM)
cola(rss$PVAM)
class(rss$PVAM)
cola<- function(x){
x<- gsub('$', '',x)
x<-as.numeric(x)
x
}
cola(rss$PVAM)
class(rss$PVAM)
cola<- function(x){
x<- gsub('$', '',x)
x<-as.numeric(x)
#x
}
cola(rss.drop$PVAM)
class(rss.drop$PVAM)
as.numeric(rss$PVAM)
rss$PVAM<-as.numeric(rss$PVAM)
class(rss$PVAM)
dollar <- function(x){
b<- gsub('$', '',x)
b
}
rowApply(rssBig,
dollar(rssBig$PVAM)
)
class(rssBig$PVAM)
colnames(rssBig)
drop<-readLines('variables/drop.txt')
rssBig.drop <- rssBig[, !(c(colnames(rssBig) %in% drop))]
mean(rssBig$AGE)
str(rssBig)
mean(rssBig$cnd_log)
sd(rssBig$cnd_log)
is.bigr.connected()
is.bigr.connected()
my.pwd<- readLines("passwd.txt", warn = FALSE)
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
is.bigr.connected()
str(rssBig)
ncol(rssBig)
nrow(rssBig)
var
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
coltypes = var,
useMapReduce = F)
nrow(rssBig)
str(rssBig)
is.character(rssBig$PVAM)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#coltypes = var,
useMapReduce = T)
is.character(rssBig$PVAM)
str(rssBig)
str(rss)
library(bigr)
# connect to biginsight
getwd()
my.pwd<- readLines("passwd.txt", warn = FALSE)
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
is.bigr.connected()
var_var <-c(fac_var, num_var, char_var)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
colnames = var_var,
coltypes = var,
useMapReduce = T)
str(rssBig)
head(rssBig$POLICY_NUMBER)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#colnames = var_var,
#coltypes = var,
useMapReduce = T)
head(rssBig$POLICY_NUMBER)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#colnames = var_var,
coltypes = var,
useMapReduce = T)
head(rssBig$POLICY_NUMBER)
col(rss)
col(rssBig)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
colnames = var_var,
#coltypes = var,
useMapReduce = T)
names(col(rss))<-colnames(rss)
head(col(rss))
rm(list = ls())
rss <- read.csv('APS_nochi.csv', header = TRUE,colClasses = var, nrows =10 ,na.strings = c("NA",''))
rss <- read.csv('APS_nochi.csv', header = TRUE, nrows =10 ,na.strings = c("NA",''))
fac_var<-readLines('variables/factors.txt')
which(colnames(rss)%in%(fac_var))
num_var <-readLines('variables/numeric.txt')
char_var <-readLines('variables/character.txt')
char <-which(colnames(rss)%in%(fac_var,char_var ))
char <-which(colnames(rss)%in%c(fac_var,char_var ))
str(char)
char <-as.vector(which(colnames(rss)%in%c(fac_var,char_var )))
char <-which(colnames(rss)%in%c(fac_var,char_var ))
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
colnames = var_var,
coltypes = ifelse(1:193 %in% char,
"character", "integer"),
useMapReduce = T)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#colnames = var_var,
coltypes = ifelse(1:193 %in% char,
"character", "integer"),
useMapReduce = T)
getwd()
my.pwd<- readLines("passwd.txt", warn = FALSE)
bigr.connect(host="ehaasp-10811-master-3.bi.services.bluemix.net",
user="yemalingodonou",
password=my.pwd,
ssl=TRUE,
trustStorePath = "c:\\Temp\\cacerts",
trustStorePassword="changeit",
keyManager="SunX509")
is.bigr.connected()
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#colnames = var_var,
coltypes = ifelse(1:193 %in% char,
"character", "integer"),
useMapReduce = T)
str(rssBig)
coltypes(rssBig)
str(rssBig)
head(rssBig$POLICY_NUMBER)
rssBig <- bigr.frame(dataPath = "/user/yemalingodonou/RSS/rss_data0825.csv",
dataSource = "DEL",
delimiter=",", header = T,
#colnames = var_var,
coltypes = ifelse(1:193 %in% char,
"character", "numeric"),
useMapReduce = T)
coltypes(rssBig)
drop<-readLines('variables/drop.txt')
rssBig.drop <- rssBig[, !(c(colnames(rssBig) %in% drop))]
colnames(rssBig) %in% drop
which(colnames(rssBig) %in% drop)
rssBig.drop <- rssBig[, !(c(which(colnames(rssBig) %in% drop)))]
dro.var <-which(colnames(rssBig) %in% drop)
rssBig.drop <- rssBig[, !drop]
rssBig.drop <- rssBig[, -drop]
str(drop)
dro.var
rssBig.drop <- rssBig[, -drop.var]
rssBig.drop <- rssBig[, -(drop.var)]
rssBig.drop <- rssBig[, -(dro.var)]
rss.filter <-subset(rssBig.drop, SRCE_FILE_YEAR_NUM=='2005')
colnames(rssBig.drop)
rss.filter <-subset(rssBig.drop, UNDERWRITE_AMT <=2000000)
rss.filter <-subset(rssBig.drop, PM_IND==1)
rss.filter <-subset(rssBig.drop, rssBig.drop$UNDERWRITE_AMT <=2000000)
with(rssBig, subset(rssBig.drop))
with(rssBig, subset(rssBig.drop, UNDERWRITE_AMT <=2000000))
rss.filter <-subset(rss, UNDERWRITE_AMT <=2000000)
rssBig@colnames
rssBig@tableExpression
head(rssBig$POLICY_NUMBER)
head(rssBig[,5])
?subset
with(airquality, subset(Ozone, Temp > 80))
with(rssBig.drop, subset(rssBig.drop, UNDERWRITE_AMT <=2000000))
rssBig.drop[,UNDERWRITE_AMT <=2000000]
head(rssBig[1])
head(rssBig[[1]])
?foreach
